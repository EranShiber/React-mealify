{"version":3,"sources":["Layouts/Nav.js","Components/Input.js","Components/RecipeBox.js","App.js","Components/Recipe.js","Components/LikedList.js","Components/Router.js","serviceWorker.js","index.js"],"names":["Nav","newTo","pathname","state","this","props","userLikes","react_default","a","createElement","className","NavLink","to","Component","Input","onSubmit","hendleSearch","type","onChange","hendleInputChange","placeholder","autoComplete","name","value","RecipeBox","recipe","length","map","x","concat","recipe_id","title","img","image_url","rank","social_rank","style","backgroundImage","Link","onClick","hendleLikedRecipe","paddingLeft","marginTop","App","userType","e","_this","setState","target","id","likedArr","filter","oldState","likedRecipe","push","apply","Object","toConsumableArray","preventDefault","fetch","then","res","json","data","newState","recipes","JSON","parse","localStorage","getItem","userRecipes","stringify","setItem","Layouts_Nav","Components_Input","Components_RecipeBox","Recipe","console","log","location","React","UserList","notAddedRecipesStyle","fontSize","textAlign","Router","HashRouter","Switch","Route","path","component","exact","LikedList","Boolean","window","hostname","match","ReactDOM","render","Components_Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cb506dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nclass Nav extends Component {\r\n    render() {\r\n        \r\n        const newTo = {\r\n            pathname: 'likes',\r\n            state: this.props.userLikes\r\n        }\r\n        return (\r\n            <nav className=\"main-nav\">\r\n                <header className=\"main-header\">\r\n                    <ul>\r\n                        <li>\r\n                            <button className=\"main-icon\">\r\n                                <div className=\"icon\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </div>\r\n                            </button>\r\n                            <div className=\"logo\">\r\n                                <NavLink to=\"/\">LOGO</NavLink>\r\n                            </div>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to={newTo}>Likes</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to=\"#\">Services</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to=\"#\">Contact</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </header>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\nexport default Nav","import React from 'react';\r\n\r\nconst Input = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.hendleSearch}\r\n            className=\"main-form\" >\r\n\r\n            <input type=\"text\"\r\n                onChange={props.hendleInputChange}\r\n                className=\"main-input\"\r\n                placeholder=\"Search any meal...\"\r\n                autoComplete=\"off\"\r\n                name=\"meal\" />\r\n\r\n            <input type=\"submit\"\r\n                className=\"main-btn\"\r\n                value=\"Go\" />\r\n\r\n        </form>\r\n    )\r\n}\r\nexport default Input;","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst RecipeBox = (props) => {\r\n    return props.recipe.length > 0 ?\r\n        (\r\n            <div className=\"container-box\">\r\n                {props.recipe.map(x => {\r\n                    const newTo = {\r\n                        pathname: `/recipe/${x.recipe_id}`,\r\n                        state: {\r\n                            title: x.title,\r\n                            img: x.image_url,\r\n                            rank: x.social_rank\r\n                        }\r\n                    }\r\n                    return <div className=\"recipe-box\" style={{ backgroundImage: `url(${x.image_url})` }}>\r\n                        <h4>{x.title}</h4>\r\n                        <p>{x.social_rank}</p>\r\n                        <div className=\"backside\">\r\n                            <Link className=\"view-recipe\" to={newTo}>View Recipe </Link>\r\n                            <button onClick={() => { props.hendleLikedRecipe(x.recipe_id) }} className=\"like-btn\">Add to favorite</button>\r\n                        </div>\r\n                    </div>\r\n                })}\r\n            </div>) :\r\n        (\r\n\r\n            <div style={{\r\n                paddingLeft: '41%',\r\n                marginTop: '10%'\r\n\r\n            }}>\r\n                Recipes are waiting for you...\r\n            </div>\r\n\r\n        )\r\n\r\n\r\n\r\n}\r\n\r\nexport default RecipeBox;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Nav from './Layouts/Nav'\r\nimport Input from './Components/Input';\r\nimport RecipeBox from './Components/RecipeBox';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    recipe: [],\r\n    userLikes: [],\r\n    userType: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n   if ( JSON.parse(localStorage.getItem(\"recipe\")) > '') {\r\n    this.setState({recipe: JSON.parse(localStorage.getItem(\"recipe\"))})  \r\n   }    \r\n   if ( JSON.parse(localStorage.getItem(\"userRecipe\")) > '' ) {\r\n     this.setState({userLikes: JSON.parse(localStorage.getItem(\"userRecipe\")) })\r\n   }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let userRecipes = JSON.stringify(this.state.recipe);\r\n    let userLikes = JSON.stringify(this.state.userLikes)\r\n    localStorage.setItem(\"recipe\", userRecipes)\r\n    localStorage.setItem(\"userRecipe\", userLikes)\r\n  }\r\n\r\n  hendleInputChange = (e) => {\r\n    this.setState({ userType: e.target.value })\r\n  }\r\n\r\n\r\nhendleLikedRecipe = (id) => {\r\n  const likedArr = this.state.recipe.filter(x=> {\r\n     return x.recipe_id === id\r\n  })\r\nthis.setState(oldState => {\r\n  let likedRecipe = oldState.userLikes;\r\n  likedRecipe.push(...likedArr);\r\n  this.setState({userLikes: [...likedRecipe]})\r\n})\r\n}\r\n\r\n\r\n\r\n  hendleSearch = (e) => {\r\n    e.preventDefault()\r\n    fetch(`https://www.food2fork.com/api/search?key=36d8a730466c68aaab341345469f3a33&q=${this.state.userType}`)\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        this.setState(oldState => {\r\n          let newState = oldState.recipe\r\n          newState.push(...data.recipes)\r\n          return {\r\n            recipe: newState\r\n          }\r\n        })\r\n      })\r\n    }\r\n\r\n\r\n\r\n\r\n  render() {\r\n  \r\n    return (\r\n      <div>\r\n        <Nav userLikes={this.state.userLikes}/>\r\n        <Input hendleSearch={this.hendleSearch} hendleInputChange={this.hendleInputChange} />\r\n        <RecipeBox recipe={this.state.recipe} hendleLikedRecipe={this.hendleLikedRecipe} userLikes={this.state.userLikes} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport Nav from '../Layouts/Nav';\r\nimport { Link } from 'react-router-dom';\r\n\r\n class Recipe extends React.Component  {\r\n     render() {\r\n        console.log(this.props.location.state)\r\n         return(\r\n             <div>\r\n             <Nav />\r\n             <div className=\"container-active\">\r\n            <h4>{this.props.location.state.title}</h4>\r\n            <div className=\"active-pick\" style={{backgroundImage: `url(${this.props.location.state.img})`}}></div>\r\n            <Link to=\"/\">Home</Link>\r\n         </div> \r\n         </div>\r\n         )\r\n     }\r\n}\r\nexport default Recipe","import React from 'react';\r\nimport Nav from '../Layouts/Nav';\r\n\r\nclass UserList extends React.Component {\r\n    notAddedRecipesStyle = {\r\n        fontSize: '170%',\r\n        textAlign: 'center',\r\n        marginTop: '10%'\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Nav />\r\n                {JSON.parse(localStorage.getItem(\"userRecipe\")) ? (<div> {this.props.location.state.map(x => {\r\n                    return <div className=\"recipe-box\" style={{ backgroundImage: `url(${x.image_url})` }}>\r\n                        <h4>{x.title}</h4>\r\n                        <p>{x.social_rank}</p>\r\n                        <div className=\"backside\">\r\n                        </div>\r\n                    </div>\r\n                })}\r\n                </div>) : (\r\n                <div style={this.notAddedRecipesStyle}>You didnt added any recipes!</div>\r\n                )}\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserList","import React from 'react';\r\nimport App from '../App'\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport Recipe from './Recipe';\r\nimport LikedList from './LikedList';\r\n\r\nclass Router extends React.Component {\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <Switch >\r\n                    <Route path=\"/\" component={App} exact />\r\n                    <Route path=\"/recipe/:id\" component={Recipe} />\r\n                    <Route path=\"/likes\" component={LikedList} exact />\r\n                </Switch>\r\n            </HashRouter>\r\n        )\r\n    }\r\n}\r\nexport default Router;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Router from './Components/Router'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Router />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}